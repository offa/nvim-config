" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
" Copyright 2016-2020 offa
" Copyright 2014 Steve Francia
"
" Licensed under the Apache License, Version 2.0 (the "License");
" you may not use this file except in compliance with the License.
" You may obtain a copy of the License at
"
"     http://www.apache.org/licenses/LICENSE-2.0
"
" Unless required by applicable law or agreed to in writing, software
" distributed under the License is distributed on an "AS IS" BASIS,
" WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
" See the License for the specific language governing permissions and
" limitations under the License.
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

" }

" Plugins {
    call plug#begin('~/.vim/plugged')

    " Deps {

        Plug 'MarcWeber/vim-addon-mw-utils'
        Plug 'tomtom/tlib_vim'
        if executable('ag')
            Plug 'mileszs/ack.vim'
            let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
        elseif executable('ack-grep')
            let g:ackprg="ack-grep -H --nocolor --nogroup --column"
            Plug 'mileszs/ack.vim'
        elseif executable('ack')
            Plug 'mileszs/ack.vim'
        endif
    " }

    " In your .vimrc.before.local file
    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'writing', 'deoplete', 'programming', 'c_cpp', ]
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " General {
        if count(g:spf13_bundle_groups, 'general')
            " Themes
            Plug 'joshdick/onedark.vim'
            Plug 'morhetz/gruvbox'

            " Airline
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            Plug 'powerline/fonts'

            Plug 'raviqqe/vim-nonblank'
            Plug 'roman/golden-ratio'
            Plug 'RRethy/vim-illuminate'
            Plug 'jeetsukumaran/vim-buffergator'
            Plug 'scrooloose/nerdtree'
            Plug 'tpope/vim-surround'
            Plug 'tpope/vim-repeat'
            Plug 'rhysd/conflict-marker.vim'
            Plug 'jiangmiao/auto-pairs'
            Plug 'ctrlpvim/ctrlp.vim'
            Plug 'tacahiroy/ctrlp-funky'
            Plug 'terryma/vim-multiple-cursors'
            Plug 'vim-scripts/sessionman.vim'
            Plug 'benjifisher/matchit.zip'
            Plug 'easymotion/vim-easymotion'
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'mbbill/undotree'
            Plug 'nathanaelkane/vim-indent-guides'
            if !exists('g:spf13_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
            Plug 'mhinz/vim-signify'
            Plug 'tpope/vim-abolish'
            Plug 'osyo-manga/vim-over'
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'gcmt/wildfire.vim'
            Plug 'ervandew/supertab'
        endif
    " }

    " Writing {
        if count(g:spf13_bundle_groups, 'writing')
            Plug 'reedes/vim-litecorrect'
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            Plug 'reedes/vim-wordy'
        endif
    " }

    " General Programming {
        if count(g:spf13_bundle_groups, 'programming')
            " Pick one of the checksyntax, jslint, or syntastic
            Plug 'vim-syntastic/syntastic'
            Plug 'tpope/vim-fugitive'
            Plug 'scrooloose/nerdcommenter'
            Plug 'godlygeek/tabular'
            Plug 'luochen1990/rainbow'
            if executable('ctags')
                Plug 'majutsushi/tagbar'
            endif
            Plug 'sheerun/vim-polyglot'
        endif
    " }

    " Snippets & AutoComplete {
        if count(g:spf13_bundle_groups, 'snipmate')
            Plug 'garbas/vim-snipmate'
            Plug 'honza/vim-snippets'
            " Source support_function.vim to support vim-snippets.
            if filereadable(expand("~/.vim/plugged/vim-snippets/snippets/support_functions.vim"))
                source ~/.vim/plugged/vim-snippets/snippets/support_functions.vim
            endif
        elseif count(g:spf13_bundle_groups, 'youcompleteme')
            Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'neocomplcache')
            Plug 'Shougo/neocomplcache'
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        elseif count(g:spf13_bundle_groups, 'deoplete')
            Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
            Plug 'Shougo/neosnippet'
            Plug 'Shougo/neosnippet-snippets'
            Plug 'honza/vim-snippets'
        endif
    " }

    " C / C++ {
        if count(g:spf13_bundle_groups, 'c_cpp')
            Plug 'octol/vim-cpp-enhanced-highlight'
            Plug 'pboettch/vim-cmake-syntax'
        endif
    " }

    " PHP {
        if count(g:spf13_bundle_groups, 'php')
            Plug 'spf13/PIV'
            Plug 'arnaud-lb/vim-php-namespace'
            Plug 'lumiliet/vim-twig'
        endif
    " }

    " Python {
        if count(g:spf13_bundle_groups, 'python')
            " Pick either python-mode or pyflakes & pydoc
            Plug 'python-mode/python-mode'
            Plug 'yssource/python.vim'
            Plug 'vim-scripts/python_match.vim'
            Plug 'vim-scripts/pythoncomplete'
        endif
    " }

    " Javascript {
        if count(g:spf13_bundle_groups, 'javascript')
            Plug 'elzr/vim-json'
            Plug 'groenewege/vim-less'
            Plug 'pangloss/vim-javascript'
            Plug 'briancollins/vim-jst'
            Plug 'kchmck/vim-coffee-script'
        endif
    " }

    " Scala {
        if count(g:spf13_bundle_groups, 'scala')
            Plug 'derekwyatt/vim-scala'
            Plug 'derekwyatt/vim-sbt'
            Plug 'xptemplate'
        endif
    " }

    " Haskell {
        if count(g:spf13_bundle_groups, 'haskell')
            Plug 'travitch/hasksyn'
            Plug 'dag/vim2hs'
            Plug 'Twinside/vim-haskellConceal'
            Plug 'Twinside/vim-haskellFold'
            Plug 'lukerandall/haskellmode-vim'
            Plug 'eagletmt/neco-ghc'
            Plug 'eagletmt/ghcmod-vim'
            Plug 'Shougo/vimproc.vim'
            Plug 'adinapoli/cumino'
            Plug 'bitc/vim-hdevtools'
        endif
    " }

    " HTML {
        if count(g:spf13_bundle_groups, 'html')
            Plug 'hail2u/vim-css3-syntax'
            Plug 'gorodinskiy/vim-coloresque'
            Plug 'tpope/vim-haml'
            Plug 'mattn/emmet-vim'
        endif
    " }

    " Ruby {
        if count(g:spf13_bundle_groups, 'ruby')
            Plug 'tpope/vim-rails'
            let g:rubycomplete_buffer_loading = 1
            "let g:rubycomplete_classes_in_global = 1
            "let g:rubycomplete_rails = 1
        endif
    " }

    " Puppet {
        if count(g:spf13_bundle_groups, 'puppet')
            Plug 'rodjek/vim-puppet'
        endif
    " }

    " Go Lang {
        if count(g:spf13_bundle_groups, 'go')
            "Plug 'Blackrush/vim-gocode'
            Plug 'fatih/vim-go'
        endif
    " }

    " Elixir {
        if count(g:spf13_bundle_groups, 'elixir')
            Plug 'elixir-lang/vim-elixir'
            Plug 'carlosgaldino/elixir-snippets'
            Plug 'mattreduce/vim-mix'
        endif
    " }

    " Gist {
        if count(g:spf13_bundle_groups, 'gist')
            Plug 'mattn/webapi-vim'
            Plug 'mattn/gist-vim'
        endif
    " }

    " Latex {
        if count(g:spf13_bundle_groups, 'latex')
            Plug 'lervag/vimtex'
        endif
    " }

    " Misc {
        if count(g:spf13_bundle_groups, 'misc')
            Plug 'rust-lang/rust.vim'
            Plug 'tpope/vim-markdown'
            Plug 'greyblake/vim-preview'
            Plug 'tpope/vim-cucumber'
            Plug 'cespare/vim-toml'
            Plug 'quentindecock/vim-cucumber-align-pipes'
            Plug 'saltstack/salt-vim'
        endif
    " }

    endif


    " Use fork bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.fork"))
            source ~/.vimrc.bundles.fork
        endif
    " }

    " Use local bundles config if available {
        if filereadable(expand("~/.vimrc.bundles.local"))
            source ~/.vimrc.bundles.local
        endif
    " }

    call plug#end()

" }
